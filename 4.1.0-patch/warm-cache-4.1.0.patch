diff -Naur warm-cache-4.1.0-orig/mijnpress_plugin_framework.php warm-cache-4.1.0/mijnpress_plugin_framework.php
--- warm-cache-4.1.0-orig/mijnpress_plugin_framework.php	2023-02-13 14:42:42.000000000 +0200
+++ warm-cache-4.1.0/mijnpress_plugin_framework.php	2023-04-08 13:35:51.109336132 +0300
@@ -68,7 +68,7 @@
      * @author     Ramon Fincken
      */
     function addPluginSubMenu( $title, $function, $file, $capability = 10, $where = "plugins.php" ) {
-    	add_submenu_page( $where, $title, $title, 'manage_options', $file, $function );
+    	add_submenu_page( $where, $title, $title, $capability, $file, $function );
     }
 
     /**
diff -Naur warm-cache-4.1.0-orig/warm_cache_crawl.php warm-cache-4.1.0/warm_cache_crawl.php
--- warm-cache-4.1.0-orig/warm_cache_crawl.php	2023-02-13 14:42:42.000000000 +0200
+++ warm-cache-4.1.0/warm_cache_crawl.php	2023-04-08 13:36:24.734620954 +0300
@@ -10,6 +10,7 @@
 	private $start;
 	private $limit;
 	private $hits;
+	private $index;
 	private $useflush;
 	private $pid_lock;
 
@@ -20,80 +21,136 @@
 			if( $newlimit > 0 ) {
 				return $newlimit;
 			}
-		}	    
+		}
 		return $limit;
 	}
 
-	public function __construct() {
+	private function do_crawl_multi( $urls ) {
+		$header_variations = array(
+								array( "Accept" => "text/html,application/xhtml+xml,application/xml" ),
+								array( "Accept-Encoding" => "gzip", "Accept" => "text/html,application/xhtml+xml,application/xml" ),
+								array( "Accept-Encoding" => "br", "Accept" => "text/html,application/xhtml+xml,application/xml" )
+								);
+
+		$multi_curl = curl_multi_init();
+		$curl_array = array();
+		$curl_index = 0;
+
+		foreach( $urls as $url ) {
+			foreach ( $header_variations as $i => $headers ) {
+				$curl_array[$curl_index] = curl_init();
+
+				curl_setopt_array( $curl_array[$curl_index], array(
+					CURLOPT_URL => $url,
+					CURLOPT_RETURNTRANSFER => true,
+					CURLOPT_MAXREDIRS => 1,
+					CURLOPT_TIMEOUT => 5,
+					CURLOPT_HTTPHEADER => $headers
+				) );
+
+				curl_multi_add_handle( $multi_curl, $curl_array[$curl_index] );
+
+				$curl_index++;
+			}
+		}
+
+		// execute the multi handle
+		$active = null;
+
+		do {
+			$status = curl_multi_exec( $multi_curl, $active );
+			if ( $active ) {
+				// Wait a short time for more activity
+				curl_multi_select( $multi_curl );
+			}
+		} while ( $active && $status == CURLM_OK );
+
+		// close the handles
+		for ( $i=0; $i < $curl_index; $i++ ) {
+			curl_multi_remove_handle( $multi_curl, $curl_array[$i] );
+		}
+
+		curl_multi_close( $multi_curl );
+
+		// free up additional memory resources
+		for ( $i=0; $i < $curl_index; $i++ ) {
+			curl_close( $curl_array[$i] );
+		}
+	}
 
+	public function __construct() {
 		// Prevent any reverse proxy caching / browser caching
 		header("Cache-Control: no-store, no-cache, must-revalidate, max-age=0");
 		header("Cache-Control: post-check=0, pre-check=0", false);
 		header("Pragma: no-cache");
+		header("X-Accel-Buffering: no");
 
+		// flush any output buffers
+		while ( @ob_end_flush() ) ;
 
 		add_filter( 'mp_warm_cache_limit_filters', array( $this, 'crawl_limit_filter' ) , 10, 1 );
-
 		$this->pid_lock = 'mp_warm_cache_pid_lock';
-		$is_locked = get_transient( $this->pid_lock );
+		$this->useflush = get_option( 'plugin_warm_cache_lb_flush' );
 
-		if( $is_locked ) {
-			echo 'Lock active, stopped processing. Wait 60 seconds';
+		$is_locked = get_transient( $this->pid_lock );
+		if ( $is_locked ) {
+			echo "Lock active, stopped processing. Wait 60 seconds\n";
 			die();
+		} else {
+			set_transient( $this->pid_lock, 'Busy', MINUTE_IN_SECONDS );
 		}
-	
+
 		$warm_cache = new warm_cache();
 		$warm_cache->google_sitemap_generator_options = get_option( 'sm_options' );
-	
-		$this->useflush = get_option( 'plugin_warm_cache_lb_flush' );
+		$sitemap_url = $warm_cache->get_sitemap_url();
 
 		$this->limit = apply_filters( 'mp_warm_cache_limit_filters', get_option( 'plugin_warm_cache_limit', 20 ) );
+		$start_p = get_option( 'plugin_warm_cache_start', 0 );
+		$this->start = ($start_p!==false) ? $start_p : 0;
 
-		$this->start = get_option( 'plugin_warm_cache_start', 0 );
+		echo 'Start at item '.$this->start. ' limit '. $this->limit . "\n";
+		if ( $this->useflush == 'yes' && function_exists( 'flush' ) ){
+			flush();
+		}
 
-		echo 'Start at item '.$this->start. ' limit '. $this->limit;
 		$mtime = microtime();
 		$mtime = explode(' ', $mtime);
 		$mtime = $mtime[1] + $mtime[0];
 		$starttime = $mtime;
-	
+
 		@set_time_limit(0);
-	
-		ob_start();
 
 		// For stats
 		$statdata = get_option( 'plugin_warm_cache_statdata' );
-		if( !isset( $statdata ) || !is_array( $statdata ) )
-		{
+		if ( !isset( $statdata ) || !is_array( $statdata ) ){
 			add_option( 'plugin_warm_cache_statdata', array(), NULL, 'no' );
 		}
 
-		$sitemap_url = $warm_cache->get_sitemap_url();
 		$this->newvalue = array();
 		$this->totalcount = 0;
 		$this->hits = 0;
+		$this->index = 0;
 		$this->newvalue['url'] = $sitemap_url;
 		$this->newvalue['time_start'] = time();
 		$this->newvalue['pages'] = array();
-	
 
 		// GOGOGO!
 		$this->mp_process_sitemap( $sitemap_url  );
-	
+
+		echo "\n\nTotal hits was ".$this->hits.", total count was ".$this->totalcount."\n\n";
 		// Give it some time to post-process
 		set_transient( $this->pid_lock, 'Busy', 10 );
 
-		// Increase counter
-		$newstart = $this->start+$this->limit;
-		if( $this->hits == 0 ) {
-			// None found, we crossed the border, reset to zero
-			echo 'no hits, resetting the start to zero for next time';
+		// check to see if we managed to process all URLs in the sitemaps
+		if ( ( ( $this->hits == $this->totalcount ) && ($this->totalcount <= $this->limit) ) || ( !$this->hits && $this->totalcount ) || ( $this->start + $this->hits >= $this->totalcount ) ) {
 			$newstart = 0;
+		} else {
+			$newstart = $this->start + $this->limit;
 		}
-		echo "<br/>Updating to start (next time) at : $newstart";
-		update_option( 'plugin_warm_cache_start', $newstart);
-	
-		if( !defined( 'MP_WARM_CACHE_NO_LOGGING_AT_ALL' ) ) {
+		echo "<br/>Updating to start (next time) at : " . $newstart . "\n";
+		update_option( 'plugin_warm_cache_start', $newstart );
+
+		if ( !defined( 'MP_WARM_CACHE_NO_LOGGING_AT_ALL' ) ) {
 
 			$mtime = microtime();
 			$mtime = explode(" ", $mtime);
@@ -118,11 +175,11 @@
 				}
 
 				$this_page_id = wp_insert_post($post);
-				if( $this_page_id ) {
+				if ( $this_page_id ) {
 					add_post_meta($this_page_id, 'mytime', $totaltime);
 					add_post_meta($this_page_id, 'mypages', $cnt);
 					add_post_meta($this_page_id, 'totalpages', $this->totalcount);
-				}	
+				}
 			} catch (Exception $e) {
 				echo $e->getMessage();
 			}
@@ -130,86 +187,86 @@
 			// Cleanup, delete old data
 			$period_php = '180 minutes';
 			$myposts = get_posts( 'post_type=warmcache&numberposts=100&order=ASC&orderby=post_date' );
-	
+
 			$now = strtotime( 'now' );
 			foreach ( $myposts AS $post) {
 				$post_date_plus_visibleperiod = strtotime( $post->post_date . " +" . $period_php );
 				if ( $post_date_plus_visibleperiod < $now ) {
 					wp_delete_post( $post->ID, false );
-				}						
+				}
 			}
 		}
-	
+
 		echo $returnstring;
-		echo '<br><br><strong>Done!</strong>';
-	
-		if( $this->useflush == 'yes' && function_exists( 'flush' ) )
-		{
+		echo '<br><br><strong>Done!</strong>\n';
+
+		if ( $this->useflush == 'yes' && function_exists( 'flush' ) ){
 			flush(); // prevent timeout from the loadbalancer
 		}
-	
-	
+
+
+		delete_transient( $this->pid_lock );
 		die();
 	}
-	
-	private function mp_process_sitemap( $sitemap_url, $is_sub = false )
-	{
 
-		if( substr_count( $sitemap_url, 'warmcache-sitemap.xml' ) > 0 || substr_count( $sitemap_url, 'warmcache' ) > 0) {
+	private function mp_process_sitemap( $sitemap_url, $is_sub = false ) {
+		if ( substr_count( $sitemap_url, 'warmcache-sitemap.xml' ) > 0 || substr_count( $sitemap_url, 'warmcache' ) > 0) {
 			// No need to crawl our own post type .. bail
 			return;
 		}
 		$xmldata = wp_remote_retrieve_body( wp_remote_get( $sitemap_url ) );
-		
-		
-		
 		$xml = simplexml_load_string( $xmldata );
-		
-		$cnt = 0;
-		if( $xml->url ) {
-			$cnt = count( $xml->url );
-		}
-		if( $cnt > 0 )
-		{
-			for($i = -1; $i < $cnt; $i++){
-				if( $this->hits >= $this->limit ) {
-					return;
-				}
-				
-				if( $this->totalcount <= ( $this->start+$this->limit ) && $this->totalcount > $this->start) {
-					$this->hits++;
+		if ( $xml === false ) {
+			return;
+		}
+
+		$cnt = count( $xml->url );
+		if ( $cnt > 0 ) {
+			$this->totalcount += $cnt;
+
+			if ( $this->hits >= $this->limit ) {
+				return;
+			}
+
+			if ( ( $this->start > $this->index ) && ($this->start > $this->index + $cnt ) ) {
+				$this->index += $cnt;
+				return;
+			}
+
+			for ($i = 0; $i < $cnt; $i++) {
+				$this->index++;
+
+				if ( $this->index > $this->start ) {
+
 					$page = (string)$xml->url[$i]->loc;
-					echo '<br/>Busy with: '.$page;
+					echo '<br/>Busy with: ' . $page . "\n";
+					if ( $this->useflush == 'yes' && function_exists( 'flush' ) ) {
+						flush(); // prevent timeout from the loadbalancer
+					}
 
 					set_transient( $this->pid_lock, 'Busy', MINUTE_IN_SECONDS );
 
 					$this->newvalue['pages'][] = $page;
-					$tmp = wp_remote_get( $page );
-					// 	https://wordpress.org/support/topic/needs-flush-to-write-buffers-to-prevent-timeouts
-					if( $this->useflush == 'yes' && function_exists( 'flush' ) )
-					{
-						flush(); // prevent timeout from the loadbalancer
+
+					$this->do_crawl_multi( array( $page ) );
+
+					$this->hits++;
+					if ( $this->hits >= $this->limit ) {
+						return;
 					}
+
 				}
-				$this->totalcount++;
 			}
-		}
-		else
-		{
+		} else {
 			// Sub sitemap?
-			$cnt = 0;
-			if( $xml->sitemap ) {
-				$cnt = count( $xml->sitemap );
-			}
-			if( $cnt > 0 )
-			{
+			$cnt = count( $xml->sitemap );
+			if ( $cnt > 0 ) {
 				for( $i = 0;$i < $cnt; $i++ ){
 					$sub_sitemap_url = (string)$xml->sitemap[$i]->loc;
-					echo "<br/>Start with submap: ".$sub_sitemap_url;
+					echo "<br/>Start with submap: " . $sub_sitemap_url . "\n";
 					$this->mp_process_sitemap( $sub_sitemap_url, true );
-				}				
+				}
 			}
 		}
 	}
 }
-define( 'WARM_CACHE_CRAWL_CLASS' , true );
diff -Naur warm-cache-4.1.0-orig/warm-cache.php warm-cache-4.1.0/warm-cache.php
--- warm-cache-4.1.0-orig/warm-cache.php	2023-02-14 08:05:30.000000000 +0200
+++ warm-cache-4.1.0/warm-cache.php	2023-04-08 13:41:57.533442032 +0300
@@ -8,40 +8,15 @@
 Author URI: https://www.autowarmcache.com
 Text Domain: managedwphosting_warmcache
 */
-if( !defined( 'ABSPATH' ) && !isset( $_GET['warm_cache'] ) ) {
+if ( !defined( 'ABSPATH' ) && !isset( $_GET['warm_cache'] ) ) {
 		die( "Aren't you supposed to come here via WP-Admin?" );
 }
 
-if( !class_exists( 'mijnpress_plugin_framework' ) ) {
+
+if ( !class_exists( 'mijnpress_plugin_framework' ) ) {
 	include( 'mijnpress_plugin_framework.php' );
 }
 
-load_plugin_textdomain( 'managedwphosting_warmcache', false, WP_LANG_DIR . '/loco/plugins/' );
-
-add_action( 'init', 'mp_warmcache_create_post_type' );
-function mp_warmcache_create_post_type() {
-	$labels = [
-		'name'            => 'warmcache',
-		'singular_name'   => 'warmcache',
-	];
- 
-	$args = [
-		'labels'             => $labels,
-		'public'             => true,
-		'publicly_queryable' => true,
-		'show_ui'            => true,
-		'show_in_menu'       => true,
-		'query_var'          => true,
-		'rewrite'            => array( 'slug' => 'warmcache' ),
-		'capability_type'    => 'post',
-		'has_archive'        => true,
-		'hierarchical'       => false,
-		'menu_position'      => null,
-		'supports'           => array( 'title', 'editor', 'author', 'excerpt', ),
-	];
-	 
-	register_post_type( 'warmcache', $args );
-}
 
 class warm_cache extends mijnpress_plugin_framework {
 	public $google_sitemap_generator_options;
@@ -50,50 +25,50 @@
 
 
 	function __construct() {
-		$this->showcredits                = true;
+		$this->showcredits				= true;
 		$this->showcredits_fordevelopers  = false;
-		$this->plugin_title               = 'Warm Cache';
-		$this->plugin_class               = 'warm_cache';
-		$this->plugin_filename            = 'warm_cache/warm_cache.php';
-		$this->plugin_config_url          = NULL;
-		$this->keep_time                  = 7*DAY_IN_SECONDS; // 7 days for now (TODO: admin setting)
-		$this->flush_loadbalancer         = get_option( 'plugin_warm_cache_lb_flush' );
+		$this->plugin_title			   = 'Warm Cache';
+		$this->plugin_class			   = 'warm_cache';
+		$this->plugin_filename			= 'warm_cache/warm_cache.php';
+		$this->plugin_config_url		  = NULL;
+		$this->keep_time				  = 7*DAY_IN_SECONDS; // 7 days for now (TODO: admin setting)
+		$this->flush_loadbalancer		 = get_option( 'plugin_warm_cache_lb_flush' );
 	}
 
 	public static function admin_notices() {
-		$warm_cache_admin	= new warm_cache();		
-		$sitemap_url		= $warm_cache_admin->get_sitemap_url();
+		$warm_cache_admin	= new warm_cache();
+		$sitemap_url		 = $warm_cache_admin->get_sitemap_url();
 
-		if( !$sitemap_url ) {
+		if ( !$sitemap_url ) {
 			// No override post?
-			if(!isset($_POST['update_sitemap']) || !$_POST['update_sitemap']) {
+			if (!isset($_POST['update_sitemap']) || !$_POST['update_sitemap']) {
 				echo '<div class="error"><p>';
-				_e( 'A notice from plugin Warm-cache: Your configured sitemap url is not configured, I cannot crawl your pages.', 'managedwphosting_warmcache');
-				echo '<a href="'.admin_url('plugins.php?page=warm-cache%2Fwarm-cache.php').'">'._('Update your sitemap url now', 'managedwphosting_warmcache').'</a>.</p></div>';
+				_e( 'A notice from plugin Warm-cache: Your configured sitemap url is not configured, I cannot crawl your pages.', 'managedwphosting_warmcache' );
+				echo '<a href="'.admin_url('plugins.php?page=warm-cache%2Fwarm-cache.php').'">'.__( 'Update your sitemap url now', 'managedwphosting_warmcache' ).'</a>.</p></div>';
 			}
 		} else {
 			// Check sitemap validity
 			$key = 'warm-cache-sitemapcheck';
 
-			if (false === ( $sitemapSyntaxOK = get_transient( $key ) ) ) {			     
+			if (false === ( $sitemapSyntaxOK = get_transient( $key ) ) ) {
 				$sitemapSyntaxOK = true;
 				$response = wp_remote_get($sitemap_url);
-				if(! is_array($response)) {
+				if (! is_array($response)) {
 					$errormsg = print_r($response, true);
 					$sitemapSyntaxOK = false;
 				} else {
 					$xmldata = wp_remote_retrieve_body($response);
-					if(substr_count($xmldata, '<?xml') == 0) {
+					if (substr_count($xmldata, '<?xml') == 0) {
 						$sitemapSyntaxOK = false;
 						$errormsg = __('No xml opening tag', 'managedwphosting_warmcache' );
 					} else {
-						if(substr_count($xmldata, '<urlset') == 0 && substr_count($xmldata, '<sitemap') == 0) {
+						if (substr_count($xmldata, '<urlset') == 0 && substr_count($xmldata, '<sitemap') == 0) {
 							$sitemapSyntaxOK = false;
 							$errormsg = __('Urlset or sitemap tag', 'managedwphosting_warmcache' );
 						}
-					}	
+					}
 				}
-				if( $sitemapSyntaxOK ) {
+				if ( $sitemapSyntaxOK ) {
 					// If it's OK, we will re-check in 12 hours
 					set_transient( $key, $sitemapSyntaxOK, 12 * HOUR_IN_SECONDS );
 				} else {
@@ -102,23 +77,23 @@
 				}
 			}
 
-			if( !$sitemapSyntaxOK ) {
+			if ( !$sitemapSyntaxOK ) {
 				echo '<div class="error"><p>';
 				_e('A notice from plugin Warm-cache: Your configured sitemap url', 'managedwphosting_warmcache' );
 				echo '( <a href="'.$sitemap_url.'">'.$sitemap_url.'</a> ) ';
 				_e( 'is configured, but does not appear to contain an xml opening tag, or a combination of urlset or sitemap, I cannot crawl your pages. Please check your sitemap plugin to fix your currupt sitemap.', 'managedwphosting_warmcache' );
 				echo '<br/>';
 				_e( 'Note: this check will be cached for 2 minutes. So if you fix the problem, this notice might still be present for 2 minutes.', 'managedwphosting_warmcache' );
-				
+
 				echo '</p><p>Error detail: '.$errormsg. '</p></div>';
 			}
 
-			if( !function_exists( 'simplexml_load_string' ) ) {
+			if ( !function_exists( 'simplexml_load_string' ) ) {
 				echo '<div class="error"><p>'.__('PHP Function simplexml_load_string is not available on your server, please contact your host.', 'managedwphosting_warmcache' ).'</p>
 				<p>Error detail: undefined function simplexml_load_string</p></div>';
 			}
 		}
-	}	
+	}
 
 	public static function init() {
 		$labels = array(
@@ -139,8 +114,8 @@
 		);
 
 		$args = array(
-			//'labels'             => $labels,
-		        'description'        => __( 'Description.', 'managedwphosting_warmcache' ),
+			//'labels'           => $labels,
+			'description'        => __( 'Description.', 'managedwphosting_warmcache' ),
 			'public'             => false,
 			'publicly_queryable' => false,
 			'show_ui'            => true,
@@ -154,21 +129,25 @@
 			'supports'           => array( 'title', 'editor', 'custom-fields' )
 		);
 
-		register_post_type( 'warmcache', $args );	
+		register_post_type( 'warmcache', $args );
 
-		if( defined( 'WARM_CACHE_CRAWL_CLASS' ) ) {
+		if ( isset( $_GET['warm-key'] ) && !empty( $_GET['warm-key'] ) && sanitize_text_field($_GET['warm-key']) == get_option( 'plugin_warm_cache_api' ) ) {
+			require_once( 'warm_cache_crawl.php' );
 			$warm_cache_crawler = new warm_cache_crawl();
+		} else {
+			if ( is_admin() ) {
+				add_action( 'admin_menu', array( 'warm_cache', 'addPluginSubMenu_' ) );
+				add_filter( 'plugin_row_meta', array( 'warm_cache', 'addPluginContent_' ), 10, 2 );
+				add_action( 'admin_notices', array( 'warm_cache', 'admin_notices' ) );
+			}
 		}
-
 	}
 
-	static function addPluginSubMenu_($title = '',$function = '')
-	{
+	static function addPluginSubMenu_($title = '',$function = '') {
 		$plugin = new warm_cache();
-		$plugin->addPluginSubMenu( 'Warm cache', array( 'warm_cache', 'admin_menu' ), __FILE__ );
+		$plugin->addPluginSubMenu( 'Warm cache', array( 'warm_cache', 'admin_menu' ), __FILE__, 'manage_options', 'options-general.php' );
 	}
 
-
 	/**
 	 * Additional links on the plugin page
 	 */
@@ -178,37 +157,28 @@
 		return $links;
 	}
 
-	public static function admin_menu()
-	{
-		load_plugin_textdomain( 'plugin_warm_cache' );		
+	public static function admin_menu() {
+		load_plugin_textdomain( 'plugin_warm_cache' );
 		$warm_cache_admin = new warm_cache();
 		$warm_cache_admin->plugin_title = 'Warm cache';
-		if(!$warm_cache_admin->configuration_check())
-		{
+		if (!$warm_cache_admin->configuration_check()) {
 
-		}
-		else
-		{
+		} else {
 			$warm_cache_admin->content_start();
 			$stats = $warm_cache_admin->get_stats();
 
-			if(!$stats['crawl'])
-			{
+			if (!$stats['crawl']) {
 				$msg = 'Ok, we have detected your sitemap url but it has not been visited by the plugin\'s crawler.<br/>';
-				$warm_cache_api_url = trailingslashit(get_bloginfo('url')).'?warm_cache='.get_option('plugin_warm_cache_api');
+				$warm_cache_api_url = trailingslashit(get_bloginfo('url')).'warmcache/?warm-key='.get_option('plugin_warm_cache_api');
 				$msg .= 'The url you should call from a cronjob is: '.$warm_cache_api_url.'<br/>';
 				$msg .= 'To re-set the key, visit this url: '.admin_url('plugins.php?page=warm-cache/warm-cache.php&resetkey=true').'<br/>';
-				
 				$msg .= '<p>Or save you all the hassle and use our <a href="https://www.autowarmcache.com/">Auto Warm cache service</a></p>';
-				
+
 				$warm_cache_admin->show_message($msg);
 				echo '<br/><br/>';
-			}
-			else
-			{
+			} else {
 				$msg = 'Crawled in total '.$stats['stats_pages'].' pages in a total of '.$stats['stats_times']. ' seconds (based on the last 75 crawls)<br/>';
-				if($stats['stats_pages'])
-				{
+				if ($stats['stats_pages']) {
 					$msg .= 'Average page to load a page in seconds: '. $stats['stats_times']/$stats['stats_pages'];
 				}
 				$warm_cache_admin->show_message($msg);
@@ -220,32 +190,29 @@
 			$warm_cache_admin->content_end();
 		}
 	}
-	
+
 	/**
 	 * Add or update the API key
 	 */
 	private function change_apikey() {
 		$special_chars = false;
 		delete_option('plugin_warm_cache_api');
-		add_option('plugin_warm_cache_api', wp_generate_password(9, $special_chars));		
+		add_option('plugin_warm_cache_api', wp_generate_password(9, $special_chars));
 	}
 
 	/**
 	* Gets table and stats
 	*/
-	private function get_stats()
-	{
+	private function get_stats() {
 		$myposts = get_posts('post_type=warmcache&numberposts=75&order=DESC&orderby=post_date');
-		
+
 		$statdata = get_option('plugin_warm_cache_start', false);
-		if($statdata === false && !get_option('plugin_warm_cache_api'))
-		{
+		if ($statdata === false && !get_option('plugin_warm_cache_api')) {
 			$this->change_apikey();
 		}
 
 		$table_string = '';
-		if(!count($myposts))
-		{
+		if (!count($myposts)) {
 			$table_string .= '<tr><td valign="top" colspan="5">';
 			$table_string .= __('Your site has not been crawled by the plugin','plugin_warm_cache');
 			$table_string .= '</td></tr>';
@@ -253,16 +220,14 @@
 		}
 		$stats_pages = 0;
 		$stats_times = 0;
-		
-		foreach($myposts as $post) 
-		{
 
+		foreach($myposts as $post) {
 			$mytime = get_post_meta($post->ID, 'mytime', true);
 			$mypages = get_post_meta($post->ID, 'mypages', true);
-			
+
 			$stats_pages += $mypages; 
 			$stats_times += $mytime;
-			
+
 			$table_string .= '<tr><td valign="top">';
 			// Crawled at
 			$table_string .= $post->post_title.'</td>';
@@ -284,69 +249,59 @@
 	 * Updates sitemap url override
 	 * @param unknown_type $url
 	 */
-	private function update_sitemap_overide_url($url)
-	{
+	private function update_sitemap_overide_url($url) {
 		delete_option('plugin_warm_cache_sitemap_override');
-		add_option( 'plugin_warm_cache_sitemap_override', htmlspecialchars($url));			
+		add_option( 'plugin_warm_cache_sitemap_override', htmlspecialchars($url));
 	}
-	
+
 	/**
 	 * Updates flush yes/no
 	 * @param	string	$flush
 
 	 */
-	private function update_flush($flush)
-	{
+	private function update_flush($flush) {
 		delete_option( 'plugin_warm_cache_lb_flush' );
-		if( $flush != 'yes' ) { $flush = 'no'; } // Sanity check
+		if ( $flush != 'yes' ) { $flush = 'no'; } // Sanity check
 		add_option( 'plugin_warm_cache_lb_flush', htmlspecialchars($flush));
 		// Update local
-		$this->flush_loadbalancer = get_option("plugin_warm_cache_lb_flush");			
-	}	
-	
-	private function configuration_check()
-	{
+		$this->flush_loadbalancer = get_option("plugin_warm_cache_lb_flush");
+	}
+
+	private function configuration_check() {
 		$this->google_sitemap_generator_options = get_option("sm_options");
 		$msg = '';
-		if(isset($_GET['resetkey']))
-		{
+		if (isset($_GET['resetkey'])) {
 			$this->change_apikey();
 			$msg .= __('API key has changed, please update your cronjobs right now!','plugin_warm_cache');
 			$this->show_message('<strong>'.$msg.'</strong>');
 			$msg = ''; // Reset msg
 		}
-		
-		if(isset($_POST['update_sitemap']) && $_POST['update_sitemap'])
-		{
+
+		if (isset($_POST['update_sitemap']) && $_POST['update_sitemap']) {
 			$this->update_sitemap_overide_url($_POST['update_sitemap']);
 		}
-		if(isset($_POST['flush']) && $_POST['flush'])
-		{
+		if (isset($_POST['flush']) && $_POST['flush']) {
 			$this->update_flush($_POST['flush']);
-		}		
+		}
 		// Init config
 		$this->get_sitemap_url(); // FIXME: Remove?
 
 		$msg .= '<form method="post" action="'.admin_url('plugins.php?page=warm-cache/warm-cache.php'). '">Please enter your full sitemap url if we cannot detect it automatically (do not forget the http:// up front): ';
 		$msg .= '<br/><input type="text" value="'.get_option('plugin_warm_cache_sitemap_override').'" name="update_sitemap" size="60" /><input type="submit" value="Use this sitemap" /></form>';
-		
 		$msg .= '<form method="post" action="'.admin_url('plugins.php?page=warm-cache/warm-cache.php'). '">If you have a loadbalancer you might need to set flush to Yes to prevent timeouts.';
 		$msg .= '<br/>Toggle setting if you have a crawled 0 pages when calling the cronjob url.<br/> ';
 		$msg .= '<input '.(( $this->flush_loadbalancer && $this->flush_loadbalancer != 'yes') ? 'checked="checked"' : '') . ' id="plugin_wc_flush_no" name="flush" type="radio" value="no"><label for="plugin_wc_flush_no">No, do not flush</label> ';
 		$msg .= '<input '.(( $this->flush_loadbalancer && $this->flush_loadbalancer == 'yes') ? 'checked="checked"' : '') . ' id="plugin_wc_flush_yes" name="flush" type="radio" value="yes"><label for="plugin_wc_flush_yes">Yes, flush</label> ';
 		$msg .= '<input type="submit" value="Update flush settings" /></form></br>';		
 
-		if(!($this->google_sitemap_generator_options && is_array($this->google_sitemap_generator_options)) && !$this->sitemap_url) {
+		if ( !($this->google_sitemap_generator_options && is_array($this->google_sitemap_generator_options)) && !$this->sitemap_url ) {
 			$msg .= __('Could not find sitemap options, please enter your sitemap url','plugin_warm_cache');
 			$returnvar = false;
-		}
-		else
-		{
+		} else {
 			$msg .= 'Sitemap url: <a target="_blank" href="'.$this->sitemap_url.'">'.$this->sitemap_url.'</a><br/>';
-			$warm_cache_api_url = trailingslashit(get_bloginfo('url')).'?warm_cache='.get_option('plugin_warm_cache_api');
+			$warm_cache_api_url = trailingslashit(get_bloginfo('url')).'warmcache/?warm-key='.get_option('plugin_warm_cache_api');
 			$msg .= 'The url you should call from a cronjob is: '.$warm_cache_api_url.'<br/>';
 			$msg .= 'To re-set the key, visit this url: '.admin_url('plugins.php?page=warm-cache/warm-cache.php&resetkey=true').'<br/>';
-			
 			$msg .= '<p>Or save you all the hassle and use our <a href="https://www.autowarmcache.com/">Auto Warm cache service</a></p>';
 			$returnvar = true;
 		}
@@ -361,23 +316,20 @@
 	* Retrieves public front-end sitemap URL
 	* @return	string|false
 	*/
-	public function get_sitemap_url()
-	{
+	public function get_sitemap_url() {
 		// Guess sitemap url from Google XML sitemap generator
-		if( isset( $this->google_sitemap_generator_options["sm_b_location_mode"] ) &&  $this->google_sitemap_generator_options["sm_b_location_mode"] == "manual" ) {
+		if ( isset( $this->google_sitemap_generator_options["sm_b_location_mode"] ) &&  $this->google_sitemap_generator_options["sm_b_location_mode"] == "manual" ) {
 			$sitemap_url = $this->google_sitemap_generator_options["sm_b_fileurl_manual"];
-		} elseif( isset( $this->google_sitemap_generator_options["sm_b_filename"] ) && $this->google_sitemap_generator_options["sm_b_filename"] != '') {
+		} elseif ( isset( $this->google_sitemap_generator_options["sm_b_filename"] ) && $this->google_sitemap_generator_options["sm_b_filename"] != '') {
 			$sitemap_url =  trailingslashit(get_bloginfo('url')). $this->google_sitemap_generator_options["sm_b_filename"];
 		}
-		
+
 		$override = get_option( 'plugin_warm_cache_sitemap_override' );
-		if( $override && !empty( $override ) && $override != 'http://' )
-		{
+		if ( $override && !empty( $override ) && $override != 'http://' ) {
 			$sitemap_url = $override;
 		}
 		// Final check
-		if( isset( $sitemap_url ) && $sitemap_url && !empty( $sitemap_url ) && $sitemap_url != 'http://' && $sitemap_url != trailingslashit( get_bloginfo( 'url' ) ) )
-		{
+		if ( isset( $sitemap_url ) && $sitemap_url && !empty( $sitemap_url ) && $sitemap_url != 'http://' && $sitemap_url != trailingslashit( get_bloginfo( 'url' ) ) ) {
 			$this->sitemap_url = $sitemap_url;
 			return $this->sitemap_url;
 		}
@@ -385,18 +337,5 @@
 	}
 }
 
-add_action( 'init', array('warm_cache', 'init' ) );
 
-if( isset( $_GET['warm_cache'] ) && !empty( $_GET['warm_cache'] ) && $_GET['warm_cache'] == get_option( 'plugin_warm_cache_api' ) )
-{
-	include( 'warm_cache_crawl.php' );
-}
-else
-{
-	if( is_admin() )
-	{
-		add_action( 'admin_menu', array( 'warm_cache', 'addPluginSubMenu_' ) );
-		add_filter( 'plugin_row_meta', array( 'warm_cache', 'addPluginContent_' ), 10, 2 );
-		add_action( 'admin_notices', array( 'warm_cache', 'admin_notices' ) );
-	}
-}
+add_action( 'init', array('warm_cache', 'init' ) );
